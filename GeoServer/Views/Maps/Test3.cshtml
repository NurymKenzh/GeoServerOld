@* good *@
@{
    ViewBag.Title = "Test3";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*<link rel="stylesheet" href="../assets/ol3/css/ol.css" type="text/css" />
<link rel="stylesheet" href="../assets/css/samples.css" type="text/css" />*@
<link rel="stylesheet" href="http://openlayers.org/en/v3.3.0/css/ol.css" type="text/css">

@*<script src="../assets/ol3/js/ol.js"></script>*@
<script src="http://openlayers.org/en/v3.3.0/build/ol.js" type="text/javascript"></script>

<script src="http://code.jquery.com/jquery-latest.min.js"></script>

<h2>Test3</h2>

<div id="map" class="map" style="height: 600px;"></div>

<input type="button" value="Change" name="Action" onclick="Change();" class="btn btn-default" />

<script>
    // a tiled raster layer as the backdrop
    var tiledRaster = new ol.layer.Tile({
        source: new ol.source.OSM()
    });

    // styles for the vector layer
    var fill = new ol.style.Fill({
        color: 'rgba(0,0,0,0.2)'
    });

    var stroke = new ol.style.Stroke({
        color: 'rgba(0,0,0,0.4)'
    });

    var circle = new ol.style.Circle({
        radius: 6,
        fill: fill,
        stroke: stroke
    });

    var vectorStyle = new ol.style.Style({
        fill: fill,
        stroke: stroke,
        image: circle
    });

    // when loading from a features from a remote server, we need to provide
    // a loading function that handles the actual communication
    // using jQuery's ajax function, we can load the data and ask the WFS
    // server to use jsonp and send the results to the loadFeatures function
    var vectorLoader = function (extent, resolution, projection) {
        var url = 'http://geoserver.info.tm:8080/geoserver/wfs?service=WFS&' +
            'version=1.1.0&request=GetFeature&typename=localhost:admpol1&' +
            'outputFormat=text/javascript&format_options=callback:loadFeatures' +
            '&srsname=EPSG:3857&bbox=' + extent.join(',') + ',EPSG:3857';
        $.ajax({
            url: url,
            dataType: 'jsonp'
        });
    };

    // this will be called when the server data has been loaded, we can
    // use the source to read the features using its configured format
    var loadFeatures = function (response) {
        var features = vectorSource.readFeatures(response);
        vectorSource.addFeatures(features);
    };

    // the source is configured with a format, loader function and a
    // strategy, the strategy causes the loader function to be called
    // in different ways.  With the tile strategy, it will call with
    // extents matching tile boundaries for the current zoom level
    var vectorSource = new ol.source.ServerVector({
        format: new ol.format.GeoJSON(),
        loader: vectorLoader,
        strategy: ol.loadingstrategy.createTile(new ol.tilegrid.XYZ({
            maxZoom: 19
        }))
    });

    // a vector layer, this time with some style options
    var serverVector = new ol.layer.Vector({
        source: vectorSource,
        style: vectorStyle
    });

    //var center = ol.proj.transform([-72.6, 41.7], 'EPSG:4326', 'EPSG:3857');
    var view = new ol.View({
        center: [7500000, 6200000],
        zoom: 5
    });
    var map = new ol.Map({
        target: 'map',
        layers: [tiledRaster, serverVector],
        view: view
    });

    function Change() {
        alert(vectorSource.getFeatures().length);
    };
</script>
