@using GeoServer.Models

@{
    ViewBag.Title = @GeoServer.Resources.HomeTexts.GrainProduction;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/ol.css" rel="stylesheet" />
<script src="~/Scripts/ol.js"></script>

<script src="https://code.jquery.com/jquery-1.11.3.min.js"></script>
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ol3/3.16.0/ol.css" type="text/css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/ol3/3.16.0/ol.js"></script>

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

<style>
    .toppanel {
        height: 100px;
    }

    .sidepanel {
        background: #d2d2d2;
        width: 350px;
        height: 100%;
        float: right;
        overflow: auto;
    }

    .map {
        overflow: hidden;
        height: 100%;
    }

    .mapsidepanel {
        margin-bottom: 10px;
        width: 100%;
    }

    .sidepanel-hide {
        top: .5em;
        right: .5em;
    }

    .ol-custom-overviewmap,
    .ol-custom-overviewmap.ol-uncollapsible {
        bottom: auto;
        left: auto;
        right: .5em;
        top: 2.5em;
    }

        .ol-custom-overviewmap:not(.ol-collapsed) {
            border: 1px solid black;
        }

        .ol-custom-overviewmap .ol-overviewmap-map {
            border: none;
        }

        .ol-custom-overviewmap .ol-overviewmap-box {
            border: 1px solid;
            cursor: pointer;
        }

        .ol-custom-overviewmap:not(.ol-collapsed) button {
            bottom: auto;
            left: auto;
            right: 1px;
            top: 1px;
        }

    .ol-rotate {
        top: 170px;
        right: 0;
    }

    .ol-attribution ul {
        font-size: auto;
    }

    .toolbutton {
        width: 39px;
        height: 40px;
        margin: 6px;
        float: right;
        border-radius: 4px;
    }

    #layertree li > span {
        cursor: pointer;
        color: #444444;
    }

    .show {
        font-weight: normal;
        display: block;
    }

    .transparancy{
        font-weight: normal;
    }

    .split{
        height: 40px;
        background-color: #366092;
        color: #ffffff;
        cursor: pointer;
        border:1px solid black;
        border-color: #d2d2d2;
    }

    .split_label{
        margin: 8px;
    }

    .info {
        color: #ff0000;
    }

    .tooltip {
    position: absolute;
    z-index: 1020;
    display: block;
    padding: 5px;
    font-size: 11px;
    visibility: visible;
    margin-top: -2px;
    bottom:120%;
    margin-left: -2em;
}

.tooltip .tooltip-arrow {
    bottom: 0;
    left: 50%;
    margin-left: -5px;
    border-top: 5px solid #000000;
    border-right: 5px solid transparent;
    border-left: 5px solid transparent;
    position: absolute;
    width: 0;
    height: 0;
}

.tooltip-inner {
    max-width: 200px;
    padding: 3px 8px;
    color: #ffffff;
    text-align: center;
    text-decoration: none;
    background-color: #000000;
    -webkit-border-radius: 4px;
       -moz-border-radius: 4px;
            border-radius: 4px;
}

.ui-slider {
    background: black repeat-x bottom left;
    border-bottom: 1px solid #EBEAE5;
    height: 15px;
    margin: 0;
    padding: 0px;
}

.ui-slider-handle {
    background: #ED6B51;
    border-bottom: 1px solid #a8a79f;
    border-right: 1px solid #a8a79f;
    height: 20px;
    width: 10px;
    margin: 0;
    padding: 0px;
    display: inline-block;
}

.ui-slider-range {
    height: 10px;
    border-bottom: 3px solid red;
    position: relative;
}

.ui-slider-handle {
    background: #ED6B51 !important;
    border-bottom: 1px solid #a8a79f !important;
    border-right: 1px solid #a8a79f !important;
    height: 20px !important;
    width: 10px !important;
    margin: 0 !important;
    padding: 0px !important;
    display: inline-block !important;
    top: -4px !important;
}
</style>

<div id="main">
    <div class="toppanel" style="background: #366092 url(../Images/Logos/Logo1.png) no-repeat top left; background-size: contain;">
        <div style="float: right;">
            <div>
                <input type="button" id="button_overview" title="@GeoServer.Resources.Interface.OverviewMap" class="btn btn-default" onclick="ShowHideOverviewMap()" style="background: url(../Images/Buttons/MapOverview.png) no-repeat top left; background-size: contain; float: right; width: 39px; height: 40px; margin: 6px;" />
                <input type="button" title="@GeoServer.Resources.Interface.Layers" class="btn btn-default" onclick="ShowLayers()" style="background: url(../Images/Buttons/Layers.png) no-repeat top left; background-size: contain; float: right; width: 39px; height: 40px; margin: 6px;" />
                <input type="button" title="NDVI" class="btn btn-default" onclick="ShowNDVI()" style="background: url(../Images/Buttons/NDVI.png) no-repeat top left; background-size: contain; float: right; width: 39px; height: 40px; margin: 6px;" />
                <input type="button" title="@GeoServer.Resources.NDVITexts.CropsCondition" class="btn btn-default" onclick="ShowCropsCondition()" style="background: url(../Images/Buttons/CropCondition.png) no-repeat top left; background-size: contain; float: right; width: 39px; height: 40px; margin: 6px;" />
                <input type="button" title="@GeoServer.Resources.SownAreaTexts.SownAreas" class="btn btn-default" onclick="ShowSownArea()" style="background: url(../Images/Buttons/SownArea.png) no-repeat top left; background-size: contain; float: right; width: 39px; height: 40px; margin: 6px;" />
                <input type="button" title="@GeoServer.Resources.Interface.Tonneau" class="btn btn-default" onclick="Tonneau()" style="background: url(../Images/Buttons/Swipe.png) no-repeat top left; background-size: contain; float: right; width: 39px; height: 40px; margin: 6px;" />
                <input type="button" title="@GeoServer.Resources.Interface.ToHome" class="btn btn-default" onclick="ToHome()" style="background: url(../Images/Buttons/Home.png) no-repeat top left; background-size: contain; float: right; width: 39px; height: 40px; margin: 6px;" />
                <input type="button" title="@GeoServer.Resources.Interface.Workspace" class="btn btn-default" onclick="Workspace()" style="background: url(../Images/Buttons/Workspace.png) no-repeat top left; background-size: contain; float: right; width: 39px; height: 40px; margin: 6px;" />
                <input type="button" title="Справочник" class="btn btn-default" style="background: url(../Images/Buttons/Info.png) no-repeat top left; background-size: contain; float: right; width: 39px; height: 40px; margin: 6px;" />
                @Html.DropDownList("MapSources", (IEnumerable<SelectListItem>)ViewBag.MapSources, htmlAttributes: new { @id = "MapSources", @class = "form-control", @style = "float: right; margin: 6px; width: 180px;", @onchange = "ChangeMapSource(this.value)" })
            </div>
        </div>
    </div>
    <div class="mapsidepanel" id="mapsidepanel">
        <div id="sidepanel" class="sidepanel" >
            @* Слои *@
            <div class="split" id="title_layers">
                <label class="split_label">
                    <u>
                        @GeoServer.Resources.Interface.Layers
                    </u>
                </label>
            </div>
            <div id="layertree" style="margin-top: 10px;">
                <ul>
                    <li>
                        <span>
                            <label>
                                <u>
                                    @GeoServer.Resources.Interface.BaseLayers
                                </u>
                            </label>
                        </span>
                        <fieldset id="layer0">
                            <label class="show" for="visible0">
                                <input id="visible0" class="visible" type="checkbox" /> @GeoServer.Resources.Interface.Show
                            </label>
                            <label class="transparancy">
                                @GeoServer.Resources.Interface.Transparency
                            </label>
                            <input class="opacity" type="range" min="0" max="100" step="1" />
                        </fieldset>
                    </li>
                    <li>
                        <span>
                            <label>
                                <u>
                                    @GeoServer.Resources.CATOTexts.Adm
                                </u>
                            </label>
                        </span>
                        <fieldset id="layer2">
                            <label class="show" for="visible2">
                                <input id="visible2" class="visible" type="checkbox" /> @GeoServer.Resources.Interface.Show
                            </label>
                            <label class="transparancy">
                                @GeoServer.Resources.Interface.Transparency
                            </label>
                            <input class="opacity" type="range" min="0" max="100" step="1" />
                        </fieldset>
                    </li>
                    <li>
                        <span>
                            <label>
                                <u>
                                    @GeoServer.Resources.FieldTexts.Fields
                                </u>
                            </label>
                        </span>
                        <fieldset id="layer1">
                            <label class="show" for="visible1">
                                <input id="visible1" class="visible" type="checkbox" /> @GeoServer.Resources.Interface.Show
                            </label>
                            <label class="transparancy">
                                @GeoServer.Resources.Interface.Transparency
                            </label>
                            <input class="opacity" type="range" min="0" max="100" step="1" />
                        </fieldset>
                    </li>
                </ul>
            </div>
            @* Search *@
            <div class="split" id="title_search">
                <label class="split_label">
                    <u>
                        @GeoServer.Resources.Interface.Search
                    </u>
                </label>
            </div>
            <div id="search" style="margin: 10px;">
                <table>
                    <tr>
                        <td style="padding-left: 10px;">
                            @Html.DropDownList("catoobl", null, "", htmlAttributes: new { @Id = "catoobl", @class = "form-control" })
                        </td>
                    </tr>
                    <tr>
                        <td id="CATOray" style="padding-left: 10px;">
                            @Html.DropDownList("catoray", Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @Id = "catoray", @class = "form-control" })
                        </td>
                    </tr>
                </table>
            </div>
            @* Legend *@
            <div class="split" id="title_legend">
                <label class="split_label">
                    <u>
                        @GeoServer.Resources.GrainProduction.Legend
                    </u>
                </label>
            </div>
            <div id="legend" style="margin: 10px;">
                <label style="padding-bottom: 10px; padding-left: 10px; color: #444444;">
                    @GeoServer.Resources.GrainProduction.TheStateOfCropsIn2014
                </label>
                <table>
                    <tr>
                        <td style="padding-left: 10px; min-width: 50px; margin: 5px;">
                            <div style="min-height: 20px; max-width: 20px; background-color: #B8FA9C; border:1px solid black; border-color: #444444;">

                            </div>
                        </td>
                        <td style="padding: 5px; color: #444444;">
                            @GeoServer.Resources.GrainProduction.Sowing
                        </td>
                    </tr>
                    <tr>
                        <td style="padding-left: 10px;">
                            <div style="min-height: 20px; max-width: 20px; background-color: #005CE6; border:1px solid black; border-color: #444444;">

                            </div>
                        </td>
                        <td style="padding: 5px; color: #444444;">
                            @GeoServer.Resources.GrainProduction.Steam
                        </td>
                    </tr>
                    <tr>
                        <td style="padding-left: 10px;">
                            <div style="min-height: 20px; max-width: 20px; background-color: #D2D2D0; border:1px solid black; border-color: #444444;">

                            </div>
                        </td>
                        <td style="padding: 5px; color: #444444;">
                            @GeoServer.Resources.GrainProduction.Deposit
                        </td>
                    </tr>
                    <tr>
                        <td style="padding-left: 10px;">
                            <div style="min-height: 20px; max-width: 20px; background-color: #004C73; border:1px solid black; border-color: #444444;">

                            </div>
                        </td>
                        <td style="padding: 5px; color: #444444;">
                            @GeoServer.Resources.GrainProduction.SteamFromTheReservoir
                        </td>
                    </tr>
                    <tr>
                        <td style="padding-left: 10px;">
                            <div style="min-height: 20px; max-width: 20px; background-color: #737300; border:1px solid black; border-color: #444444;">

                            </div>
                        </td>
                        <td style="padding: 5px; color: #444444;">
                            @GeoServer.Resources.GrainProduction.Perennial
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="map" id="map_swipe">
            <input id="swipe" type="range" style="width: 100%; max-width: 100%;" value="100" hidden="hidden">
            <div id="map" class="map" style="height: 100%;">
            </div>
        </div>
    </div>
</div>

@* Info about object *@
<input id="hectare" type="hidden" value="@GeoServer.Resources.FieldTexts.Hectare" />
<div id="dialog_info" title="@GeoServer.Resources.Interface.ObjectInfo" hidden="hidden">
    <table>
        <tr>
            <td>
                @GeoServer.Resources.FieldTexts.Number
            </td>
            <td id="fieldnumber" style="padding-left: 10px;"></td>
        </tr>
        <tr>
            <td>
                @GeoServer.Resources.CATOTexts.Location
            </td>
            <td id="fieldCATO" style="padding-left: 10px;">
            </td>
        </tr>
        <tr>
            <td>
                @GeoServer.Resources.FieldTexts.Acreage
            </td>
            <td id="fieldacreage" style="padding-left: 10px;">
            </td>
        </tr>
        <tr>
            <td>
                @GeoServer.Resources.Interface.Year
            </td>
            <td style="padding-left: 10px;">
                @Html.DropDownList("InfoYear", Enumerable.Range(2008, 7).Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString() }), new { @Id = "InfoYear", @class = "form-control" })
            </td>
        </tr>
        <tr>
            <td>
                @GeoServer.Resources.CropRotationTexts.CropRotation
            </td>
            <td id="fieldcroprotation" style="padding-left: 10px;"></td>
        </tr>
    </table>
</div>

@* NDVI *@
<div id="dialog_NDVI" title="NDVI" hidden="hidden">
    <table>
        <tr>
            <td>
                @GeoServer.Resources.Interface.Year
            </td>
            <td style="padding-left: 10px;">
                @Html.DropDownList("NDVIYear", Enumerable.Range(2001, 15).Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString() }), new { @Id = "NDVIYear", @class = "form-control" })
            </td>
        </tr>
        <tr>
            <td>
                @GeoServer.Resources.Interface.Start
            </td>
            <td style="padding-left: 10px;">
                @Html.DropDownList("NDVIMonthStart", Enumerable.Range(5, 4).Select(i => new SelectListItem { Value = i.ToString(), Text = System.Globalization.CultureInfo.CurrentUICulture.DateTimeFormat.GetMonthName(i) }), new { @class = "form-control", @id = "NDVIMonthStart" })
            </td>
            <td style="padding-left: 10px;">
                @Html.DropDownList("NDVIDayStart", Enumerable.Range(1, 31).Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString() }), new { @class = "form-control", @id = "NDVIDayStart" })
            </td>
        </tr>
        <tr>
            <td>
                @GeoServer.Resources.Interface.Finish
            </td>
            <td style="padding-left: 10px;">
                @Html.DropDownList("NDVIMonthFinish", Enumerable.Range(5, 4).Select(i => new SelectListItem { Value = i.ToString(), Text = System.Globalization.CultureInfo.CurrentUICulture.DateTimeFormat.GetMonthName(i), Selected = true }), new { @class = "form-control", @id = "NDVIMonthFinish" })
            </td>
            <td style="padding-left: 10px;">
                @Html.DropDownList("NDVIDayFinish", Enumerable.Range(1, 31).Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString(), Selected = true }), new { @class = "form-control", @id = "NDVIDayFinish" })
            </td>
        </tr>
    </table>
    <br />
    <table>
        <tr>
            <td style="padding-left: 10px;">
                @Html.DropDownList("NDVIcatoobl", null, htmlAttributes: new { @Id = "NDVIcatoobl", @class = "form-control" })
            </td>
        </tr>
        <tr>
            <td style="padding-left: 10px;">
                @Html.DropDownList("NDVIcatoray", Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @Id = "NDVIcatoray", @class = "form-control" })
            </td>
        </tr>
    </table>
    <br />
    <input type="button" value="OK" name="Action" onclick="NDVI();" class="btn btn-default" style="background-color: #d1d1d1"/>
</div>

@* NDVI chart *@
<div id="dialog_NDVI_chart" title="NDVI" hidden="hidden">
    <img id="NDVI_chart" src="@Url.Action("GetNDVIChartImage")" />
</div>

@* State of crops *@
<div id="dialog_CropsCondition" title="@GeoServer.Resources.NDVITexts.CropsCondition" hidden="hidden">
    <table>
        <tr>
            <td>
                @GeoServer.Resources.Interface.Year
            </td>
            <td style="padding-left: 10px;">
                @Html.DropDownList("CropsConditionYear", Enumerable.Range(2001, 15).Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString() }), new { @Id = "CropsConditionYear", @class = "form-control" })
            </td>
        </tr>
        <tr>
            <td>
                @GeoServer.Resources.Interface.Start
            </td>
            <td style="padding-left: 10px;">
                @Html.DropDownList("CropsConditionMonthStart", Enumerable.Range(5, 4).Select(i => new SelectListItem { Value = i.ToString(), Text = System.Globalization.CultureInfo.CurrentUICulture.DateTimeFormat.GetMonthName(i) }), new { @class = "form-control", @id = "CropsConditionMonthStart" })
            </td>
            <td style="padding-left: 10px;">
                @Html.DropDownList("CropsConditionDayStart", Enumerable.Range(1, 31).Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString() }), new { @class = "form-control", @id = "CropsConditionDayStart" })
            </td>
        </tr>
        <tr>
            <td>
                @GeoServer.Resources.Interface.Finish
            </td>
            <td style="padding-left: 10px;">
                @Html.DropDownList("CropsConditionMonthFinish", Enumerable.Range(5, 4).Select(i => new SelectListItem { Value = i.ToString(), Text = System.Globalization.CultureInfo.CurrentUICulture.DateTimeFormat.GetMonthName(i), Selected = true }), new { @class = "form-control", @id = "CropsConditionMonthFinish" })
            </td>
            <td style="padding-left: 10px;">
                @Html.DropDownList("CropsConditionDayFinish", Enumerable.Range(1, 31).Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString(), Selected = true }), new { @class = "form-control", @id = "CropsConditionDayFinish" })
            </td>
        </tr>
    </table>
    <br />
    <table>
        <tr>
            <td style="padding-left: 10px;">
                @Html.DropDownList("CropsConditioncatoobl", null, htmlAttributes: new { @Id = "CropsConditioncatoobl", @class = "form-control" })
            </td>
        </tr>
        <tr>
            <td style="padding-left: 10px;">
                @Html.DropDownList("CropsConditioncatoray", Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @Id = "CropsConditioncatoray", @class = "form-control" })
            </td>
        </tr>
        <tr>
            <td style="padding-left: 10px;">
                
            </td>
        </tr>
    </table>
    <br />
    <input type="button" value="OK" name="Action" onclick="CropsCondition();" class="btn btn-default" style="background-color: #d1d1d1" />
    <input type="button" value="@GeoServer.Resources.Interface.BringCloser" name="Action" onclick="BringCloserCropsConditionRay();" class="btn btn-default" style="background-color: #d1d1d1" />
</div>

@* State of crops chart *@
<div id="dialog_CropsCondition_chart" title="@GeoServer.Resources.NDVITexts.CropsCondition" hidden="hidden">
    <img id="CropsCondition_chart" src="@Url.Action("GetCropsConditionChartImage")" />
    <br />
    <br />
    <input type="button" id="button_play" class="toolbutton" onclick="Play()" style="width: 20px; height: 20px; margin: 0px; background: url(../Images/Buttons/Play.png) no-repeat top left; background-size: contain; float: left; cursor: default;" />
    <div id="slider_CropConditionDates" style="margin-left: 10px; margin-right: 40px; float: left; min-width: 370px;"></div>
</div>

@* Sown area *@
<div id="dialog_SownArea" title="@GeoServer.Resources.SownAreaTexts.SownAreas" hidden="hidden">
    <table>
        <tr>
            <td style="padding-left: 10px;">
                @Html.DropDownList("SownAreaYear", Enumerable.Range(2008, 7).Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString() }), new { @Id = "SownAreaYear", @class = "form-control" })
            </td>
        </tr>
        <tr>
            <td style="padding-left: 10px;">
                @Html.DropDownList("SownAreacatoobl", null, htmlAttributes: new { @Id = "SownAreacatoobl", @class = "form-control" })
            </td>
        </tr>
        <tr>
            <td style="padding-left: 10px;">
                @Html.DropDownList("SownAreacatoray", Enumerable.Empty<SelectListItem>(), htmlAttributes: new { @Id = "SownAreacatoray", @class = "form-control" })
            </td>
        </tr>
    </table>
    <br />
    <input type="button" value="OK" name="Action" onclick="SownArea();" class="btn btn-default" style="background-color: #d1d1d1" />
</div>

@* Sown area chart *@
<div id="dialog_SownArea_chart" title="@GeoServer.Resources.SownAreaTexts.SownAreas" hidden="hidden">
    <img id="SownArea_chart" src="@Url.Action("GetSownAreaChartImage")" />
    <br />
</div>

<script>
    var geoserverURL = '@ViewBag.geoserverURL',
        geoserverWorkspace = '@ViewBag.geoserverWorkspace';

    function style_fields_ray_cc(feature, resolution) {
        if (feature.get('NDVI') > 0.7) {
            var styles = new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'rgba(0, 0, 0, 1.0)',
                    width: 1
                }),
                fill: new ol.style.Fill({
                    color: 'rgba(63,72,204, 1.0)'
                })
            });
            return styles;
        }
        if (feature.get('NDVI') > 0.6) {
            var styles = new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'rgba(0, 0, 0, 1.0)',
                    width: 1
                }),
                fill: new ol.style.Fill({
                    color: 'rgba(34,177,76, 1.0)'
                })
            });
            return styles;
        }
        if (feature.get('NDVI') > 0.55) {
            var styles = new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'rgba(0, 0, 0, 1.0)',
                    width: 1
                }),
                fill: new ol.style.Fill({
                    color: 'rgba(0,255,0, 1.0)'
                })
            });
            return styles;
        }
        if (feature.get('NDVI') > 0.45) {
            var styles = new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'rgba(0, 0, 0, 1.0)',
                    width: 1
                }),
                fill: new ol.style.Fill({
                    color: 'rgba(181,230,29, 1.0)'
                })
            });
            return styles;
        }
        if (feature.get('NDVI') > 0.4) {
            var styles = new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'rgba(0, 0, 0, 1.0)',
                    width: 1
                }),
                fill: new ol.style.Fill({
                    color: 'rgba(255,200,14, 1.0)'
                })
            });
            return styles;
        }
        if (feature.get('NDVI') > 0.3) {
            var styles = new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'rgba(0, 0, 0, 1.0)',
                    width: 1
                }),
                fill: new ol.style.Fill({
                    color: 'rgba(255,127,39, 1.0)'
                })
            });
            return styles;
        }
        var styles = new ol.style.Style({
            stroke: new ol.style.Stroke({
                color: 'rgba(0, 0, 0, 1.0)',
                width: 1
            }),
            fill: new ol.style.Fill({
                color: 'rgba(255,0,0, 1.0)'
            })
        });
        return styles;
    };


    var styles = new ol.style.Style({
        stroke: new ol.style.Stroke({
            color: 'rgba(170, 170, 170, 1.0)',
            width: 1
        }),
        fill: new ol.style.Fill({
            color: 'rgba(255, 0, 0, 1.0)'
        })
    })

    // vector layer of fields with crop status
    var Source_fields_ray_cc = new ol.source.Vector({});
    var Layer_fields_ray_cc = new ol.layer.Vector({
        source: Source_fields_ray_cc,
        style: style_fields_ray_cc
    });

    // data source and layer fields
    var Source_fields = new ol.source.TileWMS({
        url: geoserverURL + geoserverWorkspace + '/wms?',
        params: {
            'LAYERS': geoserverWorkspace + ':fields',
            'VERSION': '1.1.0',
            'FORMAT': 'image/png',
            'TILED': true
        },
        serverType: 'geoserver'
    });
    var Layer_fields =
        new ol.layer.Tile({
            source: Source_fields,
            style: styles
        });

    // data source and layer admpol
    var Source_admpol = new ol.source.TileWMS({
        url: geoserverURL + geoserverWorkspace + '/wms?',
        params: {
            'LAYERS': 'admpol',
            'VERSION': '1.1.0',
            'FORMAT': 'image/png',
            'TILED': true
        },
        serverType: 'geoserver'
    });
    var Layer_admpol =
        new ol.layer.Tile({
            source: Source_admpol,
            style: styles
        });

    // buffer vector layer of fields
    var Source_bufer = new ol.source.Vector({});
    var Layer_bufer = new ol.layer.Vector({
        source: Source_bufer,
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'transparent'
            }),
            stroke: new ol.style.Stroke({
                color: 'red',
                width: 2
            })
        })
    });

    // CATO vector buffer layer
    var Source_bufer_cato = new ol.source.Vector({});
    var Layer_bufer_cato = new ol.layer.Vector({
        source: Source_bufer_cato,
        style: new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'transparent'
            }),
            stroke: new ol.style.Stroke({
                color: 'red',
                width: 4
            })
        })
    });

    // buffer vector layer of fields
    var Source_bufer_fields = new ol.source.Vector({});
    var Layer_bufer_fields = new ol.layer.Vector({
        source: Source_bufer_fields,
        style: new ol.style.Style({
            fill: new ol.style.Fill({}),
            stroke: new ol.style.Stroke({
                color: 'red'
            })
        })
    });

    var Layer_admpol2 = new ol.layer.Vector();
    // vector layer of areas
    var Layer_admpol1 = new ol.layer.Vector();
    var url1 = "http://localhost:8080/geoserver/localhost/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=localhost:admpol1&outputFormat=text/javascript&format_options=callback:getJson";
    $.ajax({
        jsonp: false,
        jsonpCallback: 'getJson',
        type: 'GET',
        url: url1,
        async: false,
        dataType: 'jsonp',
        success: function (data) {
            Layer_admpol1 = new ol.layer.Vector({
                source: new ol.source.Vector({
                    features: (new ol.format.GeoJSON()).readFeatures(data, {
                        featureProjection: 'EPSG:3857'
                    })
                })
            });
            // vector layer of districts
            var url2 = "http://localhost:8080/geoserver/localhost/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=localhost:admpol2&outputFormat=text/javascript&format_options=callback:getJson";
            $.ajax({
                jsonp: false,
                jsonpCallback: 'getJson',
                type: 'GET',
                url: url2,
                async: false,
                dataType: 'jsonp',
                success: function (data) {
                    Layer_admpol2 = new ol.layer.Vector({
                        source: new ol.source.Vector({
                            features: (new ol.format.GeoJSON()).readFeatures(data, {
                                featureProjection: 'EPSG:3857'
                            })
                        })
                    });
                }
            });
        }
    });

    // OpenCycleMap
    function transform(extent) {
        return ol.proj.transformExtent(extent, 'EPSG:4326', 'EPSG:3857');
    }
    var Layer_OpenCycleMap = new ol.layer.Tile({
        source: new ol.source.OSM({ })
    });

    // Bing
    var Layer_Bing = new ol.layer.Tile({
        source: new ol.source.BingMaps({
            key: 'AuCpOpisOefLFRJxHhYX01u4K3oIpFAaGDfh09KS7AtHqIhJ0gVEP3Ici8eruBaA',
            imagerySet: 'Aerial'
        })
    });

    // view
    var view = new ol.View({
        projection: 'EPSG:3857',
        center: [7500000, 6200000],
        zoom: 5
    });

    // right panel
    window.app = {};
    var app = window.app;
    app.ShowHideSidePanel = function (opt_options) {
        var options = opt_options || {};
        var button = document.createElement('button');
        button.id = "sidepanelshowhide";
        button.innerHTML = '«';
        var this_ = this;
        var handleShowHideSidePanel = function () {
            if (document.getElementById("sidepanel").offsetWidth == 0) {
                document.getElementById('sidepanel').setAttribute("style", "width:350px");
                document.getElementById('sidepanel').setAttribute("style", "display:block");
                button.innerHTML = '»';
                map.updateSize();
            }
            else {
                document.getElementById('sidepanel').setAttribute("style", "width:0px");
                document.getElementById('sidepanel').setAttribute("style", "display:none");
                button.innerHTML = '«';
                map.updateSize();
            }
        };
        button.addEventListener('click', handleShowHideSidePanel, false);
        var element = document.createElement('div');
        element.className = 'sidepanel-hide ol-unselectable ol-control';
        element.appendChild(button);
        ol.control.Control.call(this, {
            element: element,
            target: options.target
        });
    }
    ol.inherits(app.ShowHideSidePanel, ol.control.Control);
    function ShowSidePanel() {
        if (document.getElementById("sidepanel").offsetWidth == 0) {
            document.getElementById('sidepanel').setAttribute("style", "width:350px");
            document.getElementById('sidepanel').setAttribute("style", "display:block");
            document.getElementById('sidepanelshowhide').innerHTML = '»';
            map.updateSize();
        }
        else {
            document.getElementById('sidepanel').setAttribute("style", "width:0px");
            document.getElementById('sidepanel').setAttribute("style", "display:none");
            document.getElementById('sidepanelshowhide').innerHTML = '«';
            map.updateSize();
        }
        map.updateSize();
    }

    // overview mini map
    var overviewMapControl = new ol.control.OverviewMap({
        className: 'ol-overviewmap ol-custom-overviewmap',
        layers: [
          new ol.layer.Tile({
              source: new ol.source.OSM({ })
          })
        ],
        collapseLabel: '\u00BB',
        label: '\u00AB',
        collapsed: true,
        tipLabel: $('#button_overview').attr('title')
    });
    var setNewExtent = function (overviewDiv) {
        var offset = overviewDiv.helper.position();
        var divSize = [overviewDiv.helper.width(), overviewDiv.helper.height()];
        var mapSize = map.getSize();
        var c = map.getView().getResolution();
        var xMove = offset.left * (Math.abs(mapSize[0] / divSize[0]));
        var yMove = offset.top * (Math.abs(mapSize[1] / divSize[1]));
        var bottomLeft = [0 + xMove, mapSize[1] + yMove];
        var topRight = [mapSize[0] + xMove, 0 + yMove];
        var left = map.getCoordinateFromPixel(bottomLeft);
        var top = map.getCoordinateFromPixel(topRight);
        var extent = [left[0], left[1], top[0], top[1]];
        map.getView().fitExtent(extent, map.getSize());
        map.getView().setResolution(c);
    };
    function ShowHideOverviewMap() {
        overviewMapControl.setCollapsed(!overviewMapControl.getCollapsed());
    }

    // map info
    var attribution = new ol.control.Attribution({
        collapsible: true,
        label: 'i',
        collapsed: true,
        tipLabel: ''
    });

    // zoom
    var zoom = new ol.control.Zoom({
        zoomInTipLabel: '',
        zoomOutTipLabel: ''
    });

    // map
    var map = new ol.Map({
        controls: ol.control.defaults({
            attribution: false,
            zoom: false
        }).extend([
            overviewMapControl,
            new ol.control.ScaleLine({ units: 'metric' }),
          new app.ShowHideSidePanel(),
          attribution,
          zoom
        ]),
        layers: [
            Layer_OpenCycleMap,
            Layer_fields,
            Layer_admpol,
            Layer_bufer, // selected field
            Layer_bufer_cato,
            Layer_bufer_fields, // area fields
            Layer_Bing
        ],
        target: 'map',
        view: view
    });

    // curtain
    Layer_Bing.on('precompose', function (event) {
        var ctx = event.context;
        var width = ctx.canvas.width * (swipe.value / 100);
        ctx.save();
        ctx.beginPath();
        ctx.rect(width, 0, ctx.canvas.width - width, ctx.canvas.height);
        ctx.clip();
    });
    Layer_Bing.on('postcompose', function (event) {
        var ctx = event.context;
        ctx.restore();
    });
    document.getElementById('swipe').addEventListener('input', function () {
        map.render();
    }, false);

    // first call of the object information window
    var first_info = true;

    // map click function
    map.on('singleclick', function (evt) {
        Source_bufer.clear();
        var viewResolution = (view.getResolution());
        document.getElementById("fieldnumber").innerHTML = '';
        document.getElementById("fieldacreage").innerHTML = '';
        document.getElementById("fieldCATO").innerHTML = '';
        document.getElementById("fieldcroprotation").innerHTML = '';
        var url_fields = Source_fields.getGetFeatureInfoUrl(
            evt.coordinate, viewResolution, 'EPSG:3857',
            {
                'INFO_FORMAT': 'text/javascript',
                'propertyName': 'idfrommap,catoid,geom'
            });
        if (url_fields) {
            // data from layers
            jQuery.ajax({
                jsonp: false,
                jsonpCallback: 'getJson',
                type: 'GET',
                url: url_fields + "&format_options=callback:getJson",
                async: false,
                dataType: 'jsonp',
                success: function (data) {
                    // field number
                    document.getElementById("fieldnumber").innerHTML = data.features[0].properties.idfrommap;
                    // work with the field as a vector
                    var polyFeature = new ol.Feature({
                        geometry: new ol.geom.MultiPolygon(data.features[0].geometry.coordinates)
                    });
                    Source_bufer.addFeature(polyFeature);
                    // getting the area of the field
                    $.ajax({
                        url: '@Url.Action("GetFieldArea")',
                        data: JSON.stringify({ "fieldidfrommap": document.getElementById("fieldnumber").innerHTML }),
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            document.getElementById("fieldacreage").innerHTML = data.FieldArea + ' ' + document.getElementById("hectare").value;
                        },
                        error: function () {
                        }
                    });
                    // getting fields CATO
                    $.ajax({
                        url: '@Url.Action("GetCATOName")',
                        data: JSON.stringify({ "catoid": data.features[0].properties.catoid }),
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            document.getElementById("fieldCATO").innerHTML = data.CATOName;
                        },
                        error: function () {
                        }
                    });
                    // crop rotation data acquisition
                    $.ajax({
                        url: '@Url.Action("GetCropRotation")',
                        data: JSON.stringify({ "fieldidfrommap": document.getElementById("fieldnumber").innerHTML, "year": document.getElementById("InfoYear").options[document.getElementById("InfoYear").selectedIndex].value }),
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            document.getElementById("fieldcroprotation").innerHTML = data.CropRotationTypeName;
                        },
                        error: function () {
                        }
                    });
                    if (Source_bufer.getFeatures().length > 0) {
                        if (first_info == true) {
                            $(function () {
                                $("#dialog_info").dialog({
                                    width: 410,
                                    height: 190,
                                    resizable: false,
                                });
                            });
                            first_info = false;
                        }
                        else {
                            $(function () {
                                $("#dialog_info").dialog({
                                    resizable: false,
                                });
                            });
                        }
                    }
                }
            });
        }
    });

    // layers
    function bindInputs(layerid, layer) {
        var visibilityInput = $(layerid + ' input.visible');
        visibilityInput.on('change', function () {
            layer.setVisible(this.checked);
            if (layerid == '#layer0') {
                Layer_Bing.setVisible(this.checked);
            }
            if (layerid == '#layer1') {
                Layer_bufer.setVisible(this.checked);
                Layer_fields_ray_cc.setVisible(this.checked);
            }
            if (layerid == '#layer2') {
                Layer_bufer_cato.setVisible(this.checked);
            }
        });
        visibilityInput.prop('checked', layer.getVisible());
        var opacityInput = $(layerid + ' input.opacity');
        opacityInput.on('input change', function () {
            layer.setOpacity(parseFloat(this.value / 100));
            if (layerid == '#layer0') {
                Layer_Bing.setOpacity(parseFloat(this.value / 100));
            }
            if (layerid == '#layer1') {
                Layer_bufer.setOpacity(parseFloat(this.value / 100));
                Layer_fields_ray_cc.setOpacity(parseFloat(this.value / 100));
            }
            if (layerid == '#layer2') {
                Layer_bufer_cato.setOpacity(parseFloat(this.value / 100));
            }
        });
        opacityInput.val(String(layer.getOpacity() * 100));
    }

    map.getLayers().forEach(function (layer, i) {
        bindInputs('#layer' + i, layer);
    });
    $('#layertree li > span').click(function () {
        $(this).siblings('fieldset').toggle();
    }).siblings('fieldset').hide();
    $('#title_layers').click(function () {
        $('#layertree').toggle();
    })
    $('#title_search').click(function () {
        $('#search').toggle();
    })
    $('#title_legend').click(function () {
        $('#legend').toggle();
    })

    function ShowLayers() {
        ShowSidePanel();
    }

    // show, hide the curtain
    function Tonneau() {
        $('#swipe').toggle();
        if ($('#swipe').is(':visible')) {
            $("#map").height($("#map_swipe").height() - $("#swipe").height());
        }
        else {
            $("#map").height($("#map_swipe").height());
        }
        map.updateSize();
    }

    // home
    function ToHome() {
        map.getView().setCenter([7500000, 6200000]);
        map.getView().setZoom(5);
        $("#MapSources").val("OpenStreetMap");
        var Source = new ol.source.OSM({ });
        Layer_OpenCycleMap.setSource(Source);
        Source_bufer_cato.clear();
        $("#catoobl").val("");
        $("#catoray").empty();
    }

    // workspace
    function Workspace() {
        var extent = Layer_admpol1.getSource().getExtent();
        map.getView().fit(extent, map.getSize());
    }

    // change of year in the object information window
    $("#InfoYear").change(function () {
        // get crop rotation
        document.getElementById("fieldcroprotation").innerHTML = '';
        $.ajax({
            url: '@Url.Action("GetCropRotation")',
            data: JSON.stringify({ "fieldidfrommap": document.getElementById("fieldnumber").innerHTML, "year": document.getElementById("InfoYear").options[document.getElementById("InfoYear").selectedIndex].value }),
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                document.getElementById("fieldcroprotation").innerHTML = data.CropRotationTypeName;
            },
            error: function () {
            }
        });
    });

    // area search
    $("#catoobl").change(function () {
        if (document.getElementById("catoobl").options[document.getElementById("catoobl").selectedIndex].value == '') {
            $("#catoray").empty();
            Source_bufer_cato.clear();
        }
        else {
            for (var f = 0; f < Layer_admpol1.getSource().getFeatures().length; f++) {
                if (Layer_admpol1.getSource().getFeatures()[f].get('catoid') == document.getElementById("catoobl").options[document.getElementById("catoobl").selectedIndex].value) {
                    // copy data into bufer layer
                    Source_bufer_cato.clear();
                    var polyFeature = new ol.Feature({
                        geometry: Layer_admpol1.getSource().getFeatures()[f].getGeometry()
                    });
                    Source_bufer_cato.addFeature(polyFeature);
                    // districts list
                    $.ajax({
                        url: '@Url.Action("GetCATORayons")',
                        data: JSON.stringify({ "oblcatoid": Layer_admpol1.getSource().getFeatures()[f].get('catoid') }),
                        type: 'POST',
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            $("#catoray").empty();
                            $.each(data, function (i, d) {
                                $('#catoray').append($('<option></option>').val(d.Id).html(d.Name));
                            });
                        },
                        error: function () {
                        }
                    });
                    var extent = Layer_admpol1.getSource().getFeatures()[f].getGeometry().getExtent();
                    map.getView().fit(extent, map.getSize());
                    break;
                }
            }
        }

    });

    // district search
    $("#catoray").change(function () {
        Source_bufer_cato.clear();
        for (var f = 0; f < Layer_admpol2.getSource().getFeatures().length; f++) {
            if (Layer_admpol2.getSource().getFeatures()[f].get('catoid') == document.getElementById("catoray").options[document.getElementById("catoray").selectedIndex].value) {
                var extent = Layer_admpol2.getSource().getFeatures()[f].getGeometry().getExtent();
                map.getView().fit(extent, map.getSize());
                // copy data into bufer layer
                Source_bufer_cato.clear();
                var polyFeature = new ol.Feature({
                    geometry: Layer_admpol2.getSource().getFeatures()[f].getGeometry()
                });
                Source_bufer_cato.addFeature(polyFeature);
                break;
            }
        }
    });

    // NDVI
    function ShowNDVI() {
        if (document.getElementById("catoobl").options[document.getElementById("catoobl").selectedIndex].value != '') {
            document.getElementById("NDVIcatoobl").selectedIndex = document.getElementById("catoobl").selectedIndex - 1;
        }
        ChangeNDVICatoObl();
        $(function () {
            $("#dialog_NDVI").dialog({
                width: 290,
                height: 330,
                resizable: false,
            });
        });
    }

    // select area NDVI
    function ChangeNDVICatoObl() {
        for (var f = 0; f < Layer_admpol1.getSource().getFeatures().length; f++) {
            $("#NDVIcatoray").empty();
            if (Layer_admpol1.getSource().getFeatures()[f].get('catoid') == document.getElementById("NDVIcatoobl").options[document.getElementById("NDVIcatoobl").selectedIndex].value) {
                // districts list
                $.ajax({
                    url: '@Url.Action("GetCATORayons")',
                    data: JSON.stringify({ "oblcatoid": Layer_admpol1.getSource().getFeatures()[f].get('catoid') }),
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        $("#NDVIcatoray").empty();
                        $.each(data, function (i, d) {
                            $('#NDVIcatoray').append($('<option></option>').val(d.Id).html(d.Name));
                        });
                        if (document.getElementById("catoray").options[document.getElementById("catoray").selectedIndex].value != '') {
                            document.getElementById("NDVIcatoray").selectedIndex = document.getElementById("catoray").selectedIndex;
                        }
                    },
                    error: function () {
                    }
                });
                break;
            }
        }
    }
    $("#NDVIcatoobl").change(function () {
        ChangeNDVICatoObl();
    });

    // NDVI chart
    function NDVI() {
        document.getElementById("NDVI_chart").src = "";
        var catoid = document.getElementById("NDVIcatoobl").options[document.getElementById("NDVIcatoobl").selectedIndex].value;
        if (document.getElementById("NDVIcatoray").options[document.getElementById("NDVIcatoray").selectedIndex].text != '') {
            catoid = document.getElementById("NDVIcatoray").options[document.getElementById("NDVIcatoray").selectedIndex].value;
        }
        document.getElementById("NDVI_chart").src = "@Url.Action("GetNDVIChartImage")" + "?x" + Math.floor(Math.random() * (1000 - 1 + 1) + 1) + "=x"
            + "&Year=" + document.getElementById("NDVIYear").options[document.getElementById("NDVIYear").selectedIndex].value
            + "&MonthStart=" + document.getElementById("NDVIMonthStart").options[document.getElementById("NDVIMonthStart").selectedIndex].value
            + "&DayStart=" + document.getElementById("NDVIDayStart").options[document.getElementById("NDVIDayStart").selectedIndex].value
            + "&MonthFinish=" + document.getElementById("NDVIMonthFinish").options[document.getElementById("NDVIMonthFinish").selectedIndex].value
            + "&DayFinish=" + document.getElementById("NDVIDayFinish").options[document.getElementById("NDVIDayFinish").selectedIndex].value
            + "&CATOId=" + catoid;
        $("#dialog_NDVI_chart").dialog({
            width: 840,
            height: 560,
            resizable: false,
            resizeStop: function (event, ui) {
                $("#NDVI_chart").height($(this).outerHeight() - 60);
                $("#NDVI_chart").width($(this).outerWidth() - 40);
            }

        });
    };

    var play = 0;
    var w;

    // crops condition
    function ShowCropsCondition() {
        if (document.getElementById("catoobl").options[document.getElementById("catoobl").selectedIndex].value != '') {
            document.getElementById("CropsConditioncatoobl").selectedIndex = document.getElementById("catoobl").selectedIndex - 1;
        }
        ChangeCropsConditionCatoObl();
        $(function () {
            $("#dialog_CropsCondition").dialog({
                width: 290,
                height: 330,
                resizable: false,
                close: function (event, ui) {
                    map.removeLayer(Layer_fields_ray_cc);
                }
            });
        });
    }

    // crops condition: select area
    function ChangeCropsConditionCatoObl() {
        for (var f = 0; f < Layer_admpol1.getSource().getFeatures().length; f++) {
            $("#CropsConditioncatoray").empty();
            if (Layer_admpol1.getSource().getFeatures()[f].get('catoid') == document.getElementById("CropsConditioncatoobl").options[document.getElementById("CropsConditioncatoobl").selectedIndex].value) {
                // districts list
                $.ajax({
                    url: '@Url.Action("GetCATORayonsNotEmpty")',
                    data: JSON.stringify({ "oblcatoid": Layer_admpol1.getSource().getFeatures()[f].get('catoid') }),
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        $("#CropsConditioncatoray").empty();
                        $.each(data, function (i, d) {
                            $('#CropsConditioncatoray').append($('<option></option>').val(d.Id).html(d.Name));
                        });
                        if (document.getElementById("catoray").options[document.getElementById("catoray").selectedIndex].value != '') {
                            document.getElementById("CropsConditioncatoray").selectedIndex = document.getElementById("catoray").selectedIndex - 1;
                        }
                    },
                    error: function () {
                    }
                });
                break;
            }
        }
    }
    $("#CropsConditioncatoobl").change(function () {
        ChangeCropsConditionCatoObl();
    });

    // crops condition: zoom to district
    function BringCloserCropsConditionRay() {
        for (var f = 0; f < Layer_admpol2.getSource().getFeatures().length; f++) {
            if (Layer_admpol2.getSource().getFeatures()[f].get('catoid') == document.getElementById("CropsConditioncatoray").options[document.getElementById("CropsConditioncatoray").selectedIndex].value) {
                // copy data into bufer layer
                Source_bufer_cato.clear();
                var polyFeature = new ol.Feature({
                    geometry: Layer_admpol2.getSource().getFeatures()[f].getGeometry()
                });
                Source_bufer_cato.addFeature(polyFeature);

                var extent = Layer_admpol2.getSource().getFeatures()[f].getGeometry().getExtent();
                map.getView().fit(extent, map.getSize());
                break;
            }
        }
    };

    // crops condition chart
    function CropsCondition() {
        $("#CropsConditionYear").prop('disabled', true);
        $("#CropsConditionMonthStart").prop('disabled', true);
        $("#CropsConditionDayStart").prop('disabled', true);
        $("#CropsConditionMonthFinish").prop('disabled', true);
        $("#CropsConditionDayFinish").prop('disabled', true);
        $("#CropsConditioncatoobl").prop('disabled', true);
        $("#CropsConditioncatoray").prop('disabled', true);
        document.getElementById("CropsCondition_chart").src = "";
        var catoid = document.getElementById("CropsConditioncatoobl").options[document.getElementById("CropsConditioncatoobl").selectedIndex].value;
        if (document.getElementById("CropsConditioncatoray").options[document.getElementById("CropsConditioncatoray").selectedIndex].text != '') {
            catoid = document.getElementById("CropsConditioncatoray").options[document.getElementById("CropsConditioncatoray").selectedIndex].value;
        }
        document.getElementById("CropsCondition_chart").src = "@Url.Action("GetCropsConditionChartImage")" + "?x" + Math.floor(Math.random() * (1000 - 1 + 1) + 1) + "=x"
            + "&Year=" + document.getElementById("CropsConditionYear").options[document.getElementById("CropsConditionYear").selectedIndex].value
            + "&MonthStart=" + document.getElementById("CropsConditionMonthStart").options[document.getElementById("CropsConditionMonthStart").selectedIndex].value
            + "&DayStart=" + document.getElementById("CropsConditionDayStart").options[document.getElementById("CropsConditionDayStart").selectedIndex].value
            + "&CATOId=" + catoid;
        $("#dialog_CropsCondition_chart").dialog({
            width: 490,
            height: 470,
            resizable: false,
            resizeStop: function (event, ui) {
                $("#CropsCondition_chart").height($(this).outerHeight() - 60);
                $("#CropsCondition_chart").width($(this).outerWidth() - 40);
            },
            close: function (event, ui) {
                $("#CropsConditionYear").prop('disabled', false);
                $("#CropsConditionMonthStart").prop('disabled', false);
                $("#CropsConditionDayStart").prop('disabled', false);
                $("#CropsConditionMonthFinish").prop('disabled', false);
                $("#CropsConditionDayFinish").prop('disabled', false);
                $("#CropsConditioncatoobl").prop('disabled', false);
                $("#CropsConditioncatoray").prop('disabled', false);
                stopWorker();
                $('#button_play').css('background-image', 'url(../Images/Buttons/Play.png)');
                play = 0;
            }
        });

        // dates slider
        $("#slider_date").html('');
        var sliderTooltip = function (event, ui) {
            var curValue = '';
            $.ajax({
                url: '@Url.Action("GetCropConditionDate")',
                data: JSON.stringify({
                    "Year": document.getElementById("CropsConditionYear").options[document.getElementById("CropsConditionYear").selectedIndex].value,
                    "MonthStart": document.getElementById("CropsConditionMonthStart").options[document.getElementById("CropsConditionMonthStart").selectedIndex].value,
                    "DayStart": document.getElementById("CropsConditionDayStart").options[document.getElementById("CropsConditionDayStart").selectedIndex].value,
                    "DatePosition": ui.value
                }),
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    curValue = data.Date;
                    var tooltip = '<div style="position: absolute; z-index: 1020; display: block; padding: 5px; font-size: 11px; visibility: visible; margin-top: -2px; bottom:120%; margin-left: -3.5em;"><div id="slider_date" class="tooltip-inner">' + curValue + '</div><div class="tooltip-arrow"></div></div>';
                    $('.ui-slider-handle').html(tooltip);
                },
                error: function () {
                }
            });
        }
        $(function () {
            $("#slider_CropConditionDates").slider({
                max: 0,
                value: 0,
                change: CropConditionDateChange,
                slide: sliderTooltip
            });
        });

        var curValue = '';
        $.ajax({
            url: '@Url.Action("GetCropConditionDate")',
            data: JSON.stringify({
                "Year": document.getElementById("CropsConditionYear").options[document.getElementById("CropsConditionYear").selectedIndex].value,
                "MonthStart": document.getElementById("CropsConditionMonthStart").options[document.getElementById("CropsConditionMonthStart").selectedIndex].value,
                "DayStart": document.getElementById("CropsConditionDayStart").options[document.getElementById("CropsConditionDayStart").selectedIndex].value,
                "DatePosition": 0
            }),
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                curValue = data.Date;
                var tooltip = '<div style="position: absolute; z-index: 1020; display: block; padding: 5px; font-size: 11px; visibility: visible; margin-top: -2px; bottom:120%; margin-left: -3.5em;"><div id="slider_date" class="tooltip-inner">' + curValue + '</div><div class="tooltip-arrow"></div></div>';
                $('.ui-slider-handle').html(tooltip);
            },
            error: function () {
            }
        });

        $.ajax({
            url: '@Url.Action("GetCropConditionDatesCount")',
            data: JSON.stringify({
                "Year": document.getElementById("CropsConditionYear").options[document.getElementById("CropsConditionYear").selectedIndex].value,
                "MonthStart": document.getElementById("CropsConditionMonthStart").options[document.getElementById("CropsConditionMonthStart").selectedIndex].value,
                "DayStart": document.getElementById("CropsConditionDayStart").options[document.getElementById("CropsConditionDayStart").selectedIndex].value,
                "MonthFinish": document.getElementById("CropsConditionMonthFinish").options[document.getElementById("CropsConditionMonthFinish").selectedIndex].value,
                "DayFinish": document.getElementById("CropsConditionDayFinish").options[document.getElementById("CropsConditionDayFinish").selectedIndex].value,
                "CATOId": catoid
            }),
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $("#slider_CropConditionDates").slider("option", "max", data.Count - 1);
            },
            error: function () {
            }
        });

        var urltest2 = '@Url.Action("GetCATOFields")';
        $.ajax({
            type: 'POST',
            url: urltest2,
            data: JSON.stringify({
                "catoid": catoid,
                "Year": document.getElementById("CropsConditionYear").options[document.getElementById("CropsConditionYear").selectedIndex].value,
                "MonthStart": document.getElementById("CropsConditionMonthStart").options[document.getElementById("CropsConditionMonthStart").selectedIndex].value,
                "DayStart": document.getElementById("CropsConditionDayStart").options[document.getElementById("CropsConditionDayStart").selectedIndex].value
            }),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                map.removeLayer(Layer_fields_ray_cc);
                Layer_fields_ray_cc.getSource().clear();
                Layer_fields_ray_cc = new ol.layer.Vector({
                    source: new ol.source.Vector({
                        features: (new ol.format.GeoJSON()).readFeatures(data, {
                            featureProjection: 'EPSG:3857'
                        })
                    }),
                    style: style_fields_ray_cc
                });
                map.addLayer(Layer_fields_ray_cc);
            },
            error: function () {
            }
        });

    };

    function CropConditionDateChange() {
        var catoid = document.getElementById("CropsConditioncatoobl").options[document.getElementById("CropsConditioncatoobl").selectedIndex].value;
        if (document.getElementById("CropsConditioncatoray").options[document.getElementById("CropsConditioncatoray").selectedIndex].text != '') {
            catoid = document.getElementById("CropsConditioncatoray").options[document.getElementById("CropsConditioncatoray").selectedIndex].value;
        }
        var urltest2 = '@Url.Action("GetCATOFields")';
        $.ajax({
            type: 'POST',
            url: urltest2,
            data: JSON.stringify({
                "catoid": catoid,
                "Year": document.getElementById("CropsConditionYear").options[document.getElementById("CropsConditionYear").selectedIndex].value,
                "MonthStart": document.getElementById("CropsConditionMonthStart").options[document.getElementById("CropsConditionMonthStart").selectedIndex].value,
                "DayStart": document.getElementById("CropsConditionDayStart").options[document.getElementById("CropsConditionDayStart").selectedIndex].value,
                "DatePosition": $("#slider_CropConditionDates").slider("value")
            }),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                map.removeLayer(Layer_fields_ray_cc);
                Layer_fields_ray_cc.getSource().clear();
                Layer_fields_ray_cc = new ol.layer.Vector({
                    source: new ol.source.Vector({
                        features: (new ol.format.GeoJSON()).readFeatures(data, {
                            featureProjection: 'EPSG:3857'
                        })
                    }),
                    style: style_fields_ray_cc
                });
                map.addLayer(Layer_fields_ray_cc);
                document.getElementById("CropsCondition_chart").src = "@Url.Action("GetCropsConditionChartImage")" + "?x" + Math.floor(Math.random() * (1000 - 1 + 1) + 1) + "=x"
            + "&Year=" + document.getElementById("CropsConditionYear").options[document.getElementById("CropsConditionYear").selectedIndex].value
            + "&MonthStart=" + document.getElementById("CropsConditionMonthStart").options[document.getElementById("CropsConditionMonthStart").selectedIndex].value
            + "&DayStart=" + document.getElementById("CropsConditionDayStart").options[document.getElementById("CropsConditionDayStart").selectedIndex].value
            + "&CATOId=" + catoid
            + "&DatePosition=" + $("#slider_CropConditionDates").slider("value")
                ;
            },
            error: function () {
            }
        });
    };

    function startWorker() {
        if (typeof (Worker) !== "undefined") {
            if (typeof (w) == "undefined") {
                w = new Worker("../Scripts/worker.js");
            }
            w.onmessage = function (event) {
                $("#slider_CropConditionDates").slider("value", $("#slider_CropConditionDates").slider("value") + 1);
                var curValue = '';
                $.ajax({
                    url: '@Url.Action("GetCropConditionDate")',
                    data: JSON.stringify({
                        "Year": document.getElementById("CropsConditionYear").options[document.getElementById("CropsConditionYear").selectedIndex].value,
                        "MonthStart": document.getElementById("CropsConditionMonthStart").options[document.getElementById("CropsConditionMonthStart").selectedIndex].value,
                        "DayStart": document.getElementById("CropsConditionDayStart").options[document.getElementById("CropsConditionDayStart").selectedIndex].value,
                        "DatePosition": $("#slider_CropConditionDates").slider("value")
                    }),
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        curValue = data.Date;
                        var tooltip = '<div style="position: absolute; z-index: 1020; display: block; padding: 5px; font-size: 11px; visibility: visible; margin-top: -2px; bottom:120%; margin-left: -3.5em;"><div id="slider_date" class="tooltip-inner">' + curValue + '</div><div class="tooltip-arrow"></div></div>';
                        $('.ui-slider-handle').html(tooltip);
                    },
                    error: function () {
                    }
                });
            };
        } else { }
    }
    function stopWorker() {
        if (typeof (w) !== "undefined") {
            w.terminate();
            w = undefined;
        }
    }
    function Play() {
        if (play == 0) {
            $('#button_play').css('background-image', 'url(../Images/Buttons/Pause.png)');
            play = 1;
            setTimeout(function () {
                startWorker();
            }, 3000);
        }
        else {
            $('#button_play').css('background-image', 'url(../Images/Buttons/Play.png)');
            play = 0;
            stopWorker();
        }
    };

    // sown area
    function ShowSownArea() {
        if (document.getElementById("catoobl").options[document.getElementById("catoobl").selectedIndex].value != '') {
            document.getElementById("SownAreacatoobl").selectedIndex = document.getElementById("catoobl").selectedIndex - 1;
        }
        ChangeSownAreaCatoObl();
        $(function () {
            $("#dialog_SownArea").dialog({
                width: 290,
                height: 230,
                resizable: false,
            });
        });
    }

    // sown area: select area
    function ChangeSownAreaCatoObl() {
        for (var f = 0; f < Layer_admpol1.getSource().getFeatures().length; f++) {
            $("#SownAreacatoray").empty();
            if (Layer_admpol1.getSource().getFeatures()[f].get('catoid') == document.getElementById("SownAreacatoobl").options[document.getElementById("SownAreacatoobl").selectedIndex].value) {
                // districts list
                $.ajax({
                    url: '@Url.Action("GetCATORayons")',
                    data: JSON.stringify({ "oblcatoid": Layer_admpol1.getSource().getFeatures()[f].get('catoid') }),
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        $("#SownAreacatoray").empty();
                        $.each(data, function (i, d) {
                            $('#SownAreacatoray').append($('<option></option>').val(d.Id).html(d.Name));
                        });
                        if (document.getElementById("catoray").options[document.getElementById("catoray").selectedIndex].value != '') {
                            document.getElementById("SownAreacatoray").selectedIndex = document.getElementById("catoray").selectedIndex;
                        }
                    },
                    error: function () {
                    }
                });
                break;
            }
        }
    }
    $("#SownAreacatoobl").change(function () {
        ChangeSownAreaCatoObl();
    });

    // sown area chart
    function SownArea() {
        document.getElementById("SownArea_chart").src = "";
        var catoid = document.getElementById("SownAreacatoobl").options[document.getElementById("SownAreacatoobl").selectedIndex].value;
        if (document.getElementById("SownAreacatoray").options[document.getElementById("SownAreacatoray").selectedIndex].text != '') {
            catoid = document.getElementById("SownAreacatoray").options[document.getElementById("SownAreacatoray").selectedIndex].value;
        }
        document.getElementById("SownArea_chart").src = "@Url.Action("GetSownAreaChartImage")" + "?x" + Math.floor(Math.random() * (1000 - 1 + 1) + 1) + "=x"
            + "&Year=" + document.getElementById("SownAreaYear").options[document.getElementById("SownAreaYear").selectedIndex].value
            + "&CATOId=" + catoid
        ;
        $("#dialog_SownArea_chart").dialog({
            width: 440,
            height: 360,
            resizable: false,
            resizeStop: function (event, ui) {
                $("#SownArea_chart").height($(this).outerHeight() - 60);
                $("#SownArea_chart").width($(this).outerWidth() - 40);
            }

        });
    };

    // base layer change
    function ChangeMapSource(val) {
        if (val == 'OpenStreetMap') {
            var Source = new ol.source.OSM({ });
            Layer_OpenCycleMap.setSource(Source);
        }
        if (val == 'ArcGIS') {
            var attribution = new ol.Attribution({
                html: 'Tiles © <a href="http://services.arcgisonline.com/ArcGIS/' +
                    'rest/services/World_Topo_Map/MapServer">ArcGIS</a>'
            });
            var Source = new ol.source.XYZ({
                attributions: [attribution],
                url: 'http://server.arcgisonline.com/ArcGIS/rest/services/' +
                    'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'
            });
            Layer_OpenCycleMap.setSource(Source);
        }
        if (val == 'Bing') {
            var Source = new ol.source.BingMaps({
                key: 'AuCpOpisOefLFRJxHhYX01u4K3oIpFAaGDfh09KS7AtHqIhJ0gVEP3Ici8eruBaA',
                imagerySet: 'Road'
            });
            Layer_OpenCycleMap.setSource(Source);
        }
    };

    $(document).ready(function (e) {
        $.getScript("http://code.jquery.com/ui/1.11.3/jquery-ui.min.js", function (data, textStatus, jqxhr) {
        });
        // map height
        $("#mapsidepanel").height($(window).height() - 260);
        if ($("#mapsidepanel").height() < 730) {
            $("#mapsidepanel").height(730);
        }
        document.getElementById('sidepanel').setAttribute("style", "width:0px");
        document.getElementById('sidepanel').setAttribute("style", "display:none");
        map.updateSize();
        $("#MapSources").val("OpenStreetMap");
    });
</script>