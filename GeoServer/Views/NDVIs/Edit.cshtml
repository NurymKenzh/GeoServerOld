@model GeoServer.Models.NDVI

@{
    ViewBag.Title = GeoServer.Resources.Interface.Edit;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@GeoServer.Resources.Interface.Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>NDVI</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.Label(GeoServer.Resources.FieldTexts.Field, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fieldgid, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fieldgid, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label(GeoServer.Resources.Interface.Year, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    DateTime SelectedDate = Model.Date;
                }
                @Html.DropDownList("Year",
                            Enumerable.Range(2000, 31).Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString(), Selected = (i == SelectedDate.Year) }),
                            new { @class = "form-control", @id = "Year" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label(GeoServer.Resources.Interface.Month, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Month",
                            Enumerable.Range(1, 12).
                            Select(i => new SelectListItem { Value = i.ToString(), Text = System.Globalization.CultureInfo.CurrentUICulture.DateTimeFormat.GetMonthName(i), Selected = (i == SelectedDate.Month) }),
                            new { @class = "form-control", @id = "Month" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label(GeoServer.Resources.Interface.Day, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Day",
                            Enumerable.Range(1, 31).Select(i => new SelectListItem { Value = i.ToString(), Text = i.ToString(), Selected = (i == SelectedDate.Day) }),
                            new { @class = "form-control", @id = "Day" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Count, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Count, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Count, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Min, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Min, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Min, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Max, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Max, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Max, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Range, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Range, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Range, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Mean, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Mean, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Mean, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.STD, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.STD, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.STD, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Sum, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Sum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Sum, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@GeoServer.Resources.Interface.Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink(GeoServer.Resources.Interface.BackToList, "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
        $.validator.methods.number = function (value, element) {
            return this.optional(element) ||
                !isNaN(Globalize.parseFloat(value));
        }
        $(document).ready(function () {
            Globalize.culture('@(System.Threading.Thread.CurrentThread.CurrentCulture.Name)');
        });
</script>
}
